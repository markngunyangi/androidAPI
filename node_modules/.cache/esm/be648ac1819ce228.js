let hash,compare,ApolloError,serializeUser,issueAuthToken,UserSignUpRules,UserLoginRules;_819‍.x([["default",()=>_819‍.o]]);_819‍.w("bcryptjs",[["hash",["hash"],function(v){hash=v}],["compare",["compare"],function(v){compare=v}]]);_819‍.w("apollo-server-express",[["ApolloError",["ApolloError"],function(v){ApolloError=v}]]);_819‍.w("../../helpers/Userfunctions",[["serializeUser",["serializeUser"],function(v){serializeUser=v}],["issueAuthToken",["issueAuthToken"],function(v){issueAuthToken=v}]]);_819‍.w("../../validations",[["UserSignUpRules",["UserSignUpRules"],function(v){UserSignUpRules=v}],["UserLoginRules",["UserLoginRules"],function(v){UserLoginRules=v}]]);



  
  


  
  



  
  




_819‍.d({
    Query: {
      users: async (_, {}, {
        User
      }) => {
        try {
          let users = await User.find()
          return users.map(user => {
            return {
              ...user._doc,
              _id: user.id
            };
          });
        } catch (err) {
          throw new ApolloError(err.message)
        }
  
      },

      login: async (_, {
        email,
        password
      }, {
        User,
        user
      }) => {
          // Validate Incoming User Credentials
          await UserLoginRules.validate({
            email,
            password
          }, {
            abortEarly: false
          });
          // Find the user from the database    
          const result = await User.findOne({
            email
          });
          // If User is not found     
          if (!result) {
            throw new ApolloError('User does not exist!');
          }
          // If user is found then compare the password
          let isEqual = await compare(password, result.password);
          // If Password don't match
          if (!isEqual) {
            throw new ApolloError('Password is incorrect!');
          }
          let serializedUser = await serializeUser(result);
          // Issue Token
          let token = await issueAuthToken(serializedUser);
          return {
            token,
            user: serializedUser
          }
        },
    },

    Mutation: {
        createUser: async (_, {
          userInput
        }, {
          User
        }) => {
          try {
            let {
              email
            } = userInput;
            // Validate Incoming New User Arguments
            await UserSignUpRules.validate(userInput, {
              abortEarly: false
            });
    
            // Check is the Email address is already registred
            let user = await User.findOne({
              email
            })
            
            if (user) {
              throw new ApolloError('Email is already registered');
            }
    
            // New User's Account can be created
            user = new User({
              userInput
            });
            _819‍.g.console.log(user);
            // Hash the user password
            user.password = await hash(user.password, 12);
            // Save the user to the database
            let result = await user.save();
            result = await serializeUser(result);
            // Issue Token
            let token = await issueAuthToken(result);
            return {
              token,
              user: result
            }
          } catch (err) {
            throw new ApolloError(err.message)
          }
        }
    }
});