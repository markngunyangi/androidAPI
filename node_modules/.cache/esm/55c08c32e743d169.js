let join,error,success,DB,PORT,IN_PROD,ApolloServer,schemaDirectives,AuthMiddleware,express,mongoose,bodyParser,AppModels,typeDefs,session,resolvers;_e74‍.w("path",[["join",["join"],function(v){join=v}]]);_e74‍.w("consola",[["error",["error"],function(v){error=v}],["success",["success"],function(v){success=v}]]);_e74‍.w("./config",[["DB",["DB"],function(v){DB=v}],["PORT",["PORT"],function(v){PORT=v}],["IN_PROD",["IN_PROD"],function(v){IN_PROD=v}]]);_e74‍.w("apollo-server-express",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}]]);_e74‍.w("./graphql/directives",[["schemaDirectives",["schemaDirectives"],function(v){schemaDirectives=v}]]);_e74‍.w("./middlewares/auth",[["AuthMiddleware",["AuthMiddleware"],function(v){AuthMiddleware=v}]]);_e74‍.w("express",[["default",["express"],function(v){express=v}]]);_e74‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_e74‍.w("body-parser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_e74‍.w("./models",[["*",null,function(v){AppModels=v}]]);_e74‍.w("./graphql/typeDefs",[["default",["typeDefs"],function(v){typeDefs=v}]]);_e74‍.w("express-session",[["*",null,function(v){session=v}]]);_e74‍.w("./graphql/resolvers",[["default",["resolvers"],function(v){resolvers=v}]]);




























const app = express();
// Remove x-powered-by header
//app.disable("x-powered-by");
app.use(AuthMiddleware);
app.use(bodyParser.json());
//app.use(AuthSession);
// Set Express Static Directory
app.use(express.static(join(__dirname, './uploads')));

// Define the Apollo-Server
const server = new ApolloServer({
    typeDefs,
    resolvers,
    schemaDirectives,
    playground: !IN_PROD,
    context: ({
        req
    }) => {

        let {
            user,
            isAuth,
        } = req;

        return {
            req,
            user,
            isAuth,
            ...AppModels,
        };
    }
});

// Function to start express and apollo server 
const startApp = async () => {
    try {
        // Connect With MongoDB Database
        await mongoose.connect(DB, {
            useNewUrlParser: true,
            useFindAndModify: false,
            useUnifiedTopology: true,
        });
        success({
            badge: true,
            message: `Successfully connected with the database ${DB}`,
        });

        // Apply Apollo-Express-Server Middlware to express application
        server.applyMiddleware({
            app,
            cors: true
        });

        // Start Listening on the Server
        app.listen(PORT, () =>
            success({
                badge: true,
                message: `🚀 Server ready at http://localhost:${PORT}${server.graphqlPath}`,
            })
        );
    } catch (err) {
        error({
            badge: true,
            message: err.message
        });
    }
}

// Invoke Start Application Function
startApp();